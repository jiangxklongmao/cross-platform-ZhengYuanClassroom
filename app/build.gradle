apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'
apply from: rootProject.file('releaseinfo.gradle')
apply from: rootProject.file('libbase.gradle')
//配置protobuf插件
apply plugin: 'com.google.protobuf'

kapt {
    arguments {
        arg(arouter_module_name, project.getName())
    }
}

android {
    signingConfigs {
        release {//release版的签名配置信息
            storeFile file(rootProject.ext.signConfigs.storeFile)
            storePassword rootProject.ext.signConfigs.storePassword
            keyAlias rootProject.ext.signConfigs.keyAlias
            keyPassword rootProject.ext.signConfigs.keyPassword
        }
        debug {//debug版的签名配置信息
            storeFile file(rootProject.ext.signConfigs.storeFile)
            storePassword rootProject.ext.signConfigs.storePassword
            keyAlias rootProject.ext.signConfigs.keyAlias
            keyPassword rootProject.ext.signConfigs.keyPassword
        }
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
    }

    buildTypes {
        release {
            minifyEnabled true //混淆编译
            shrinkResources true //移除无用资源
            zipAlignEnabled true //zipalign优化
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            buildConfigField("boolean", "LOG_DEBUG", "false")//正式版不打印日志
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            signingConfig signingConfigs.debug
            buildConfigField("boolean", "LOG_DEBUG", "true")
        }
    }

    repositories {
        flatDir {
            dirs 'libs'
        }
    }

//    //规定资源命名前缀为app_
//    resourcePrefix "app_"

    //自定义输出apk名字
    applicationVariants.all {
        variant ->
            variant.outputs.all {
                if (variant.getBuildType().getName() == 'release') {
                    outputFileName = new File("app_v" + variant.versionName + "_" +
                            new Date().format("yyyy-MM-dd_HH", TimeZone.getTimeZone("UTC")) + "_" +
                            variant.getBuildType().getName() + ".apk")
                }
            }
    }
}

//配置protobuf
protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.0.0'
    }
    plugins {
        javalite {
            artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0'
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                remove java
            }
            task.plugins {
                javalite {}
            }
        }
    }
}

dependencies {
    implementation project(':provider')
    implementation project(':common')
    kapt "com.alibaba:arouter-compiler:$arouter_compiler_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    kapt "com.alibaba:arouter-compiler:$arouter_compiler_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    //配置protobuf依赖
    implementation 'com.google.protobuf:protobuf-lite:3.0.1'
    implementation(name: 'domob-ads-2.2.5', ext: 'aar')
//    implementation(name: 'miit_mdid_1.0.10', ext: 'aar')
    implementation files('libs/miit_mdid_1.0.10.aar')
}
