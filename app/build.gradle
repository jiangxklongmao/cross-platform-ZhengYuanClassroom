apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'
apply from: rootProject.file('releaseinfo.gradle')
apply from: rootProject.file('libbase.gradle')

kapt {
    arguments {
        arg(arouter_module_name, project.getName())
    }
}

android {
    signingConfigs {
        release {//release版的签名配置信息
            storeFile file(rootProject.ext.signConfigs.storeFile)
            storePassword rootProject.ext.signConfigs.storePassword
            keyAlias rootProject.ext.signConfigs.keyAlias
            keyPassword rootProject.ext.signConfigs.keyPassword
        }
        debug {//debug版的签名配置信息
            storeFile file(rootProject.ext.signConfigs.storeFile)
            storePassword rootProject.ext.signConfigs.storePassword
            keyAlias rootProject.ext.signConfigs.keyAlias
            keyPassword rootProject.ext.signConfigs.keyPassword
        }
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName

        ndk {
            // 设置支持的SO库架构
            abiFilters 'armeabi' //, 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }
    }

    buildTypes {
        release {
            minifyEnabled true //混淆编译
            shrinkResources true //移除无用资源
            zipAlignEnabled true //zipalign优化
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            buildConfigField("boolean", "LOG_DEBUG", "false")//正式版不打印日志
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            signingConfig signingConfigs.debug
            buildConfigField("boolean", "LOG_DEBUG", "true")
        }
    }


//    //规定资源命名前缀为app_
//    resourcePrefix "app_"

    //自定义输出apk名字
    applicationVariants.all {
        variant ->
            variant.outputs.all {
                if (variant.getBuildType().getName() == 'release') {
                    outputFileName = new File("app_v" + variant.versionName + "_" +
                            new Date(new Date().time + 8 * 60 * 60 * 1000).format("yyyy-MM-dd_HH_mm", TimeZone.getTimeZone("UTC")) + "_" +
                            variant.getBuildType().getName() + ".apk")
                }
            }
    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

dependencies {

    implementation(name: 'open_ad_sdk', ext: 'aar')

    implementation project(':provider')
    implementation project(':common')
    kapt "com.alibaba:arouter-compiler:$arouter_compiler_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    kapt "com.alibaba:arouter-compiler:$arouter_compiler_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    // 友盟统计SDK
    implementation  'com.umeng.umsdk:common:9.1.0' // (必选)
    implementation  'com.umeng.umsdk:asms:1.1.3' // asms包依赖(必选)
    implementation 'com.umeng.umsdk:crash:0.0.4' // native crash包依赖(必选)

    implementation  'com.umeng.umsdk:oaid_lenovo:1.0.0' // (可选)
    implementation  'com.umeng.umsdk:oaid_mi:1.0.0' // (可选)
    implementation  'com.umeng.umsdk:oaid_oppo:1.0.4' // (可选)
    implementation  'com.umeng.umsdk:oaid_vivo:1.0.0.1' // (可选)

}
